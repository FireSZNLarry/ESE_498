#working 4/5/24
#!/usr/bin/env python3
import time
from board import SCL, SDA
from adafruit_motor import servo

import rospy
from std_msgs.msg import String
import math
import board
import busio
from adafruit_pca9685 import PCA9685
import adafruit_motor.servo

i2c = busio.I2C(SCL, SDA)
pca = PCA9685(i2c)


pca.frequency = 100

channel_num = 14

servo7 = servo.Servo(pca.channels[1])


class MotorControl:
    def __init__(self):
        # Initialize the motor with the PCA9685 
        self.pca = self.Servo_Motor_Initialization()
        self.pca.frequency = 100
        # ROS Subscriber setup
        rospy.Subscriber("keyboard", String, self.keyboard_callback)
    
    def Servo_Motor_Initialization(self):
        i2c_bus = busio.I2C(board.SCL, board.SDA)
        pca = PCA9685(i2c_bus)
        return pca

    def Motor_Speed(self, percent):
        speed = ((percent) * 3277) + 65535 * 0.15
        self.pca.channels[15].duty_cycle = math.floor(speed)
        print(f"Speed set to {speed/65535:.2f}")
        
    def keyboard_callback(self, msg):
        key_input = msg.data
        # Decoding the keystroke and setting motor speed accordingly
        if key_input == "0":
            self.Motor_Speed(-0.3)   # Stop
       
        elif key_input == "7": # Go left
            self.Motor_Speed(0.05)  
            
            servo7.angle = 135
            time.sleep(0.03) 
        elif key_input == "9": # Go right 
            self.Motor_Speed(0.05)  
      
            servo7.angle = 50
            time.sleep(0.03) 
        elif key_input == "8": # Go middle
            self.Motor_Speed(0.05)  
      
            servo7.angle = 93
            time.sleep(0.03) 
        else:
            print("Invalid input")

if __name__ == '__main__':
    rospy.init_node('motor_control', anonymous=True)
    mc = MotorControl()
    try:
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
