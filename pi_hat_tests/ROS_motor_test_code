#!/usr/bin/env python3
import rospy
from std_msgs.msg import String
import math
import board
import busio
from adafruit_pca9685 import PCA9685
import adafruit_motor.servo

class MotorControl:
    def __init__(self):
        # Initialize the motor with the PCA9685 
        self.pca = self.Servo_Motor_Initialization()
        self.pca.frequency = 100
        # ROS Subscriber setup
        rospy.Subscriber("keyboard", String, self.keyboard_callback)
    
    def Servo_Motor_Initialization(self):
        i2c_bus = busio.I2C(board.SCL, board.SDA)
        pca = PCA9685(i2c_bus)
        return pca

    def Motor_Speed(self, percent):
        speed = ((percent) * 3277) + 65535 * 0.15
        self.pca.channels[15].duty_cycle = math.floor(speed)
        print(f"Speed set to {speed/65535:.2f}")
        
    def keyboard_callback(self, msg):
        key_input = msg.data
        # Decoding the keystroke and setting motor speed accordingly
        if key_input == "0":
            self.Motor_Speed(0)   # Stop
        elif key_input == "1":
            self.Motor_Speed(0.3)  # Go forward
        elif key_input == "8":
            # Assuming left and right control is implemented via speed adjustments; adjust as needed.
            self.Motor_Speed(-0.3)  # Turn left (modify logic as required)
        elif key_input == "9":
            self.Motor_Speed(0.3)   # Turn right (modify logic as required)
        else:
            print("Invalid input")

if __name__ == '__main__':
    rospy.init_node('motor_control', anonymous=True)
    mc = MotorControl()
    try:
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
